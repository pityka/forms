/**
 * The MIT License (MIT) Copyright (c) 2016 Istvan Bartha
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package forms

import scala.util._
import scala.reflect.ClassTag
import scalatags.JsDom.all._
import scalatags.JsDom._
import scalatags._
import org.scalajs.dom.raw._
import org.scalajs.dom._


/* https://github.com/sbt/sbt-boilerplate */
trait Tuples {

  [#def tupleHandle[[#T1#]]([#h1: Handle[T1]#]) : Handle[Tuple1[[#T1#]]] = {
    type T = Tuple1[[#T1#]]
    new Handle[T] {
    def get = Try(Tuple1([#h1.get.get#]))
    def set(t: T) = {
      [#h1.set(t._1)#
      ]
    }
    def notify(t: Try[T] => Unit) = {
      [#h1.notify((e: Try[T1]) => t(this.get))#
      ]
    }
  }
}#
]

  [#def tupledFun[[#T1#]]([#tf1: Factory[T1]#])(combine: Seq[ViewHandle] => ViewHandle) =
    new Factory[Tuple1[[#T1#]]] {
    def make = {
      [#val (h1, n1) = tf1.make#
      ]
      val h = tupleHandle([#h1#])
      (h, combine(List([#n1#])))
    }
  }#
  ]

  implicit class PimpedTypedTag(tag:TypedTag[HTMLElement]) {
    [#def zip[[#T1#]]([#tf1: Factory[T1]#]) =
      new Factory[Tuple1[[#T1#]]] {
      def make = {
        [#val (h1, n1) = tf1.make#
        ]
        val h = tupleHandle([#h1#])
        val nn : ViewHandle =new ViewHandle {
          def enable(b: Boolean): Unit = {
            [#n1.enable(b)#
            ]
          }
          def flash(s: String): Unit = ()
          val anchor = tag([#n1.anchor#]).render
        }

        (h, nn)
      }
    }#
    ]
  }

  [#def choice[S, K, [#T1 <: K: ClassTag#]](
    [#ch1: (S, Factory[T1])#]
  )(back: K => S)(selector: Factory[S]): Factory[K] =
    new Factory[K] {
      val parent = div().render

      def make = {
        val (selectorH, selectorView) = selector.make
        [#val (h1, v1) = ch1._##2.make#
        ]


        def choices(s: S) = s match {
          [#case x if x == ch1._##1 => (h1, v1)#
          ]

        }

        parent.appendChild(currentView.anchor)

        selectorH.notify { ts =>
          ts.foreach { s =>
            parent.replaceChild(currentView.anchor, parent.firstChild)
          }
        }

        def currentView = selectorH.get.map(s => choices(s)._##2).getOrElse(v1)

        val handle = new Handle[K] {
          def get = selectorH.get.flatMap(s => choices(s)._##1.get)
          def set(k: K) = {
            selectorH.set(back(k))
            k match {
              [#case t: T1 => h1.set(t)#
              ]

            }
          }
          def notify(f: Try[K] => Unit) = {
            [#h1.notify(t => f(get))#
            ]

          }
        }
        val view = new ViewHandle {

          def enable(b: Boolean) = currentView.enable(b)
          def flash(s: String) = currentView.flash(s)
          val anchor = div(selectorView.anchor, parent).render
        }
        (handle, view)
      }
    }#
    ]

}
